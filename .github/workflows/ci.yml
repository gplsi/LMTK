name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the workflow with tmate debugging enabled'
        required: false
        default: false
        type: boolean

# Cancel in-progress jobs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_DEFAULT: "3.10"
  POETRY_VERSION: "2.1.2"
  CACHE_KEY_PREFIX: "v1"

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
          cache-dependency-path: |
            poetry.lock
            requirements.txt
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ env.CACHE_KEY_PREFIX }}-tox-lint-${{ runner.os }}-${{ env.PYTHON_DEFAULT }}-${{ hashFiles('tox.ini', 'poetry.lock') }}
      
      - name: Run linting
        run: python -m tox -e lint
  
  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
          cache-dependency-path: |
            poetry.lock
            requirements.txt
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ env.CACHE_KEY_PREFIX }}-tox-type-${{ runner.os }}-${{ env.PYTHON_DEFAULT }}-${{ hashFiles('tox.ini', 'poetry.lock') }}
      
      - name: Run type checking
        run: python -m tox -e type

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        # Uncomment to add more Python versions in the future
        # python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for coverage reports to work correctly
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            poetry.lock
            requirements.txt
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ env.CACHE_KEY_PREFIX }}-tox-py${{ matrix.python-version }}-${{ runner.os }}-${{ hashFiles('tox.ini', 'poetry.lock') }}
      
      - name: Run tests
        run: python -m tox -e py$(echo ${{ matrix.python-version }} | tr -d .)
      
      # Setup tmate session for debugging if needed
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          limit-access-to-actor: true

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for coverage reports
      
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
          cache-dependency-path: |
            poetry.lock
            requirements.txt
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ env.CACHE_KEY_PREFIX }}-tox-coverage-${{ runner.os }}-${{ env.PYTHON_DEFAULT }}-${{ hashFiles('tox.ini', 'poetry.lock') }}
      
      - name: Run coverage
        run: python -m tox -e coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} # Optional: only needed for private repositories

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'
          cache-dependency-path: |
            poetry.lock
            requirements.txt
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache tox environments
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ env.CACHE_KEY_PREFIX }}-tox-docs-${{ runner.os }}-${{ env.PYTHON_DEFAULT }}-${{ hashFiles('tox.ini', 'poetry.lock') }}
      
      - name: Build documentation
        run: python -m tox -e docs
      
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 14

  build:
    name: Build Package
    needs: [test, lint, type-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for versioning
      
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Build package
        run: poetry build
      
      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 30

  publish:
    name: Publish Package
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      
      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
          poetry publish