#!/usr/bin/env python3
import argparse
import json
from pathlib import Path
from statistics import mean


def compute_masking_stats(samples_path: Path, mask_token_id: int = 4) -> None:
    with samples_path.open("r", encoding="utf-8") as f:
        data = json.load(f)

    ratios_masked_among_selected = []  # ~ mask_token_prob (e.g., 0.8)
    ratios_selected_over_nonpad = []   # ~ mlm_probability (e.g., 0.15)
    ratios_overall_masked = []         # ~ mlm_probability * mask_token_prob (e.g., 0.12)

    for idx, sample in enumerate(data.get("samples", [])):
        tokenization = sample.get("tokenization", {})
        input_ids = tokenization.get("input_ids", [])
        labels = tokenization.get("labels", [])
        attention_mask = tokenization.get("attention_mask", [])

        # Non-padding positions
        nonpad_positions = [i for i, a in enumerate(attention_mask) if a == 1] if attention_mask else list(range(len(input_ids)))

        # Selected (labeled) positions for MLM are those with labels != -100
        labeled_positions = [i for i in nonpad_positions if i < len(labels) and labels[i] != -100]
        masked_positions = [i for i in labeled_positions if i < len(input_ids) and input_ids[i] == mask_token_id]

        num_nonpad = len(nonpad_positions)
        num_labeled = len(labeled_positions)
        num_masked = len(masked_positions)

        # Metrics
        ratio_masked_among_selected = (num_masked / num_labeled) if num_labeled else 0.0
        ratio_selected_over_nonpad = (num_labeled / num_nonpad) if num_nonpad else 0.0
        ratio_overall_masked = (num_masked / num_nonpad) if num_nonpad else 0.0

        if num_labeled:
            ratios_masked_among_selected.append(ratio_masked_among_selected)
        if num_nonpad:
            ratios_selected_over_nonpad.append(ratio_selected_over_nonpad)
            ratios_overall_masked.append(ratio_overall_masked)

        print(
            f"sample {idx}: nonpad={num_nonpad}, selected={num_labeled} ({ratio_selected_over_nonpad:.2f}), "
            f"masked_selected={num_masked} ({ratio_masked_among_selected:.2f}), overall_mask_ratio={ratio_overall_masked:.2f}"
        )

    if ratios_selected_over_nonpad:
        print(f"avg_selected_over_nonpad {mean(ratios_selected_over_nonpad):.2f}")
    else:
        print("avg_selected_over_nonpad 0.00")

    if ratios_masked_among_selected:
        print(f"avg_masked_among_selected {mean(ratios_masked_among_selected):.2f}")
    else:
        print("avg_masked_among_selected 0.00")

    if ratios_overall_masked:
        print(f"avg_overall_mask_ratio {mean(ratios_overall_masked):.2f}")
    else:
        print("avg_overall_mask_ratio 0.00")


def main() -> None:
    parser = argparse.ArgumentParser(description="Check MLM masking ratios from visualization output")
    parser.add_argument(
        "--json",
        type=str,
        default="/home/gplsi/fabio/experiments/LMTK/LMTK/output/tokenized_visuals_cli/dataset_samples.json",
        help="Path to dataset_samples.json generated by visualize_tokenized_dataset.py",
    )
    parser.add_argument(
        "--mask_token_id",
        type=int,
        default=4,
        help="Mask token id to check (default: 50264 for RoBERTa)",
    )
    args = parser.parse_args()

    samples_path = Path(args.json)
    if not samples_path.exists():
        raise FileNotFoundError(f"JSON file not found: {samples_path}")

    compute_masking_stats(samples_path, mask_token_id=args.mask_token_id)


if __name__ == "__main__":
    main()